(function() {
  angular.module('swUtils', []);

}).call(this);

(function() {
  angular.module('swUtils').directive('swFocus', function($timeout, $parse) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var model;
        model = $parse(attrs.swFocus);
        scope.$watch(model, function(value) {
          if (value === true) {
            return $timeout(function() {
              return element.focus();
            });
          }
        });
        return element.bind('blur', function() {
          return scope.$apply(model.assign(scope, false));
        });
      }
    };
  }).directive('swLoading', function() {
    return {
      restrict: 'A',
      scope: false,
      link: function(scope, element, attrs) {
        var loadingLayer;
        loadingLayer = $('<div class="loading"></div>').appendTo(element);
        $(element).addClass('sw-loading-container');
        return scope.$watch(attrs.swLoading, function(value) {
          return loadingLayer.toggle(value);
        });
      }
    };
  }).directive('swSelectOnClick', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        return element.on('click', function() {
          return this.select();
        });
      }
    };
  });

}).call(this);

(function() {
  angular.module('swUtils').filter('reverse', function() {
    return function(items) {
      return items.slice().reverse();
    };
  });

}).call(this);

(function() {
  angular.module('swUtils').service('swTitle', function() {
    var titleBase, titleEnd, titleStart;
    titleBase = '';
    titleStart = '';
    titleEnd = '';
    this.setTitleBase = function(value) {
      return titleBase = value;
    };
    this.setTitleStart = function(value) {
      return titleStart = value;
    };
    this.setTitleEnd = function(value) {
      return titleEnd = value;
    };
    this.getTitle = function() {
      return titleStart + " " + titleBase + " " + titleEnd;
    };
  }).service('swHttpHelper', function($http) {
    this.encodeQueryData = function(data) {
      var d, el, i, len, ref, ret;
      ret = [];
      for (d in data) {
        if (data[d] instanceof Array) {
          ref = data[d];
          for (i = 0, len = ref.length; i < len; i++) {
            el = ref[i];
            ret.push(encodeURIComponent(d) + "=" + encodeURIComponent(el));
          }
        } else {
          ret.push(encodeURIComponent(d) + "=" + encodeURIComponent(data[d]));
        }
      }
      return ret.join("&");
    };
    this.get = (function(_this) {
      return function(url, params) {
        var encodeParams, urlWithParams;
        encodeParams = _this.encodeQueryData(params);
        urlWithParams = url + "?" + encodeParams;
        return $http.get(urlWithParams);
      };
    })(this);
    this.post = function(url, params) {
      var encodedParams;
      encodedParams = void 0;
      if (params) {
        encodedParams = $.param(params);
      }
      return $http.post(url, encodedParams);
    };
    this.postJson = function(url, object) {
      return $http.post(url, object);
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,